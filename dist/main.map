{"version":3,"sources":["constants.js","cli/options.js","cli/usage.js","errors.js","helpers.js","commands/decentralize.js","commands/prune.js","commands/index.js","main.js"],"names":["DECENTRALIZE","PRUNE","VUE_I18N_REGEX_FUNC_CALLER","availableCommands","command","name","defaultOption","type","alias","description","multiple","typeLabel","header","content","summary","optionList","options","filter","opt","ErrorRequireArgument","Error","validateArguments","source","localesFolder","Array","isArray","length","output","decentralize","prune","optionsDefinition","commands","console","log","usage"],"mappings":"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","file":"main.map","sourceRoot":"../src","sourcesContent":["// commands\nexport const DECENTRALIZE = 'decentralize'\nexport const PRUNE = 'prune'\n\n// VUE i18n REGEX\nexport const VUE_I18N_REGEX_FUNC_CALLER = /\\$t\\((.+)\\)/g","import {\n  DECENTRALIZE,\n  PRUNE,\n  SOURCE,\n  LOCALES_FOLDER\n} from '~/constants'\n\nconst availableCommands = command => {\n  switch (command) {\n    case DECENTRALIZE:\n    case PRUNE:\n      return command\n    default:\n      return\n  }\n}\n\nexport default [\n  { name: 'command', defaultOption: true, type: availableCommands },\n  {\n    name: 'source',\n    alias: 's',\n    description: 'The input files to process',\n    multiple: true,\n    typeLabel: '{underline file}|{underline folder} {bold multiple}',\n  },\n  {\n    name: 'localesFolder',\n    alias: 'l',\n    description: 'Folder containing the vue-i18n json files',\n    typeLabel: '{underline folder}'\n  },\n  {\n    name: 'output',\n    alias: 'o',\n    description: 'Folder where to write the output, if undefined source files will be overwritten',\n    typeLabel: '{underline folder}'\n  },\n  {\n    name: 'ignoreKeys',\n    alias: 'i',\n    multiple: true,\n    typeLabel: '{underline string}',\n    description: 'Keys to ignore from json translations files'\n  }\n]","import commandLineUsage from 'command-line-usage'\nimport options from './options'\n\nexport default commandLineUsage([\n  {\n    header: 'vue-i18n-decentralizer',\n    content: 'Split your centralized locales into every vue component which uses them'\n  },\n  {\n    header: 'Usage',\n    content: 'node dist/main.js [command] [...args]'\n  },\n  {\n    header: 'Available Commands',\n    content: [\n      { name: 'decentralize', summary: 'split translations from your locales files to your component files' },\n      { name: 'prune', summary: 'remove unused translations frmo your locales files' }\n    ]\n  },\n  {\n    header: 'Arguments',\n    optionList: options.filter(opt => opt.name !== 'command')\n  }\n])","export const ErrorRequireArgument = name => new Error(`Argument ${name} is required`)","import { ErrorRequireArgument } from '~/errors'\n\nexport const validateArguments = command => ({ source, localesFolder }) => {\n  if (!Array.isArray(source) || !(source.length > 0)) {\n    throw ErrorRequireArgument('source')\n  }\n\n  if (typeof localesFolder !== 'string' || !(localesFolder.length > 0)) {\n    throw ErrorRequireArgument('localesFolder')\n  }\n\n  return command\n}","import { validateArguments } from '~/helpers'\n\nexport default validateArguments(({ source, localesFolder, output }) => {\n\n})","export default () => {}","import decentralize from './decentralize'\nimport prune from './prune'\n\nexport default {\n  decentralize,\n  prune\n}","import commandLineArgs from 'command-line-args'\nimport optionsDefinition from '~/cli/options'\nimport usage from '~/cli/usage'\nimport { DECENTRALIZE, PRUNE } from './constants'\nimport commands from './commands'\n\nconst options = commandLineArgs(optionsDefinition)\n\nswitch (options.command) {\n  case DECENTRALIZE:\n  case PRUNE:\n    commands[options.command](options)\n    break\n  default:\n    console.log(usage)\n    break\n}"]}